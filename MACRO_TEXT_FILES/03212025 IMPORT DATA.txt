    Sub ImportData()
    '
    ' ImportAll Macro - Combines ImportRemarks, ImportOthers, and ImportPayments
    ' Keyboard Shortcut: Ctrl+r
    '
        Dim ws As Worksheet
        Dim destWB As Workbook
        Dim lastRow As Long
        Dim visibleCells As Range
        Dim visibleCount As Long
        Dim totalRows As Long
        Dim currentRow As Long
        Dim finalRowCount As Long
        Dim currentDate As String
        Dim curedListFile As String
        Dim othersFileName As String
        Dim paymentsFileName As String
        Dim tempWorkbookName As String
        Dim isOpen As Boolean
        Dim wb As Workbook
        
        ' Add error handling
        On Error Resume Next
        
        ' Get current date in MMDDYYYY format
        currentDate = Format(Date, "MMddyyyy")
        
        ' Set dynamic file names
        curedListFile = "CURED LIST " & currentDate & ".xlsx"
        templateFileName = "BPI_FORIMPORTINGREMARKS_FORMULA.xlsx"
        remarksFileName = "BPI AUTOCURING REMARKS " & currentDate & ".xlsx"
        othersFileName = "BPI AUTOCURING RESHUFFLE " & currentDate & ".xlsx"
        paymentsFileName = "BPI AUTOCURING PAYMENT " & currentDate & ".xlsx"
        
        ' Check if the cured list file is open
        isOpen = False
        For Each wb In Workbooks
            If wb.Name = curedListFile Then
                isOpen = True
                Exit For
            End If
        Next wb
        
        If Not isOpen Then
            MsgBox "The file '" & curedListFile & "' is not open. Please open it before running this macro.", vbExclamation
            Exit Sub
        End If
        
        ' Ask user which imports to run
        Dim response As Integer
        response = MsgBox("Run all imports (Yes) or just ImportRemarks (No)?" & vbCrLf & vbCrLf & _
                        "Yes = Run ALL three imports" & vbCrLf & _
                        "No = Run ONLY ImportRemarks" & vbCrLf & _
                        "Cancel = Exit without importing", vbYesNoCancel + vbQuestion, "Import Options")
        
        If response = vbCancel Then
            Exit Sub
        End If
        
        ' First part: ImportRemarks
        ' -------------------------------
        MsgBox "Starting ImportRemarks...", vbInformation
        
        ' Start with row 2 in destination workbook (assuming row 1 is header)
        currentRow = 2
        totalRows = 0
        
        ' Set references
        Windows(curedListFile).Activate
        Set ws = ActiveSheet
        Windows(templateFileName).Activate
        Set destWB = ActiveWorkbook
        
        '------------------------------------------------------------
        ' 1. PROCESS NEGO BARCODE
        '------------------------------------------------------------
        Windows(curedListFile).Activate
        ' Clear any existing filters
        If ws.FilterMode Then ws.ShowAllData
        
        ' Find the last row with data
        lastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
        
        ' Apply filters for NEGO
        ws.Range("$A$1:$AU$" & lastRow).AutoFilter Field:=2, Criteria1:="<>SPMADRID"
        ws.Range("$A$1:$AU$" & lastRow).AutoFilter Field:=8, Criteria1:="<>*PTP*"

        ' Check if any rows are visible after filtering
        On Error Resume Next
        Set visibleCells = ws.Range("A2:A" & lastRow).SpecialCells(xlCellTypeVisible)
        On Error GoTo 0
        
        ' If NEGO rows found, process them
        If Not visibleCells Is Nothing Then
            visibleCount = visibleCells.Cells.Count
            
            ' FIRST COPY - "PTP NEW - CALL OUTS_PASTDUE"
            visibleCells.Copy
            Windows(templateFileName).Activate
            Range("A" & currentRow).PasteSpecial Paste:=xlPasteValues
            
            Range("B" & currentRow).Value = "PTP NEW - CALL OUTS_PASTDUE"
            If visibleCount > 1 Then
                Range("B" & currentRow).AutoFill Destination:=Range("B" & currentRow & ":B" & (currentRow + visibleCount - 1))
            End If
            currentRow = currentRow + visibleCount
            
            ' SECOND COPY - "PTP FF UP - CLIENT ANSWERED AND WILL SETTLE"
            Windows(curedListFile).Activate
            visibleCells.Copy
            Windows(templateFileName).Activate
            Range("A" & currentRow).PasteSpecial Paste:=xlPasteValues
            
            Range("B" & currentRow).Value = "PTP FF UP - CLIENT ANSWERED AND WILL SETTLE"
            If visibleCount > 1 Then
                Range("B" & currentRow).AutoFill Destination:=Range("B" & currentRow & ":B" & (currentRow + visibleCount - 1))
            End If
            currentRow = currentRow + visibleCount
            
            ' THIRD COPY - "PAYMENT - CURED"
            Windows(curedListFile).Activate
            visibleCells.Copy
            Windows(templateFileName).Activate
            Range("A" & currentRow).PasteSpecial Paste:=xlPasteValues
            
            Range("B" & currentRow).Value = "PAYMENT - CURED"
            If visibleCount > 1 Then
                Range("B" & currentRow).AutoFill Destination:=Range("B" & currentRow & ":B" & (currentRow + visibleCount - 1))
            End If
            currentRow = currentRow + visibleCount
            
            totalRows = totalRows + (visibleCount * 3)
            MsgBox "NEGO data processed: " & (visibleCount * 3) & " rows.", vbInformation
        Else
            MsgBox "No NEGO Barcode found.", vbInformation
        End If
        
        '------------------------------------------------------------
        ' 2. PROCESS PTP BARCODE
        '------------------------------------------------------------
        Windows(curedListFile).Activate
        ' Clear any existing filters
        If ws.FilterMode Then ws.ShowAllData
        
        ' Apply filters for PTP
        ws.Range("$A$1:$AU$" & lastRow).AutoFilter Field:=2, Criteria1:="<>SPMADRID"
        ws.Range("$A$1:$AU$" & lastRow).AutoFilter Field:=8, Criteria1:="*PTP*"
        
        ' Check if any rows are visible after filtering
        On Error Resume Next
        Set visibleCells = ws.Range("A2:A" & lastRow).SpecialCells(xlCellTypeVisible)
        On Error GoTo 0
        
        ' If PTP rows found, process them
        If Not visibleCells Is Nothing Then
            visibleCount = visibleCells.Cells.Count
            
            ' FIRST COPY - "PTP FF UP - CLIENT ANSWERED AND WILL SETTLE"
            visibleCells.Copy
            Windows(templateFileName).Activate
            Range("A" & currentRow).PasteSpecial Paste:=xlPasteValues
            
            Range("B" & currentRow).Value = "PTP FF UP - CLIENT ANSWERED AND WILL SETTLE"
            If visibleCount > 1 Then
                Range("B" & currentRow).AutoFill Destination:=Range("B" & currentRow & ":B" & (currentRow + visibleCount - 1))
            End If
            currentRow = currentRow + visibleCount
            
            ' SECOND COPY - "PAYMENT - CURED"
            Windows(curedListFile).Activate
            visibleCells.Copy
            Windows(templateFileName).Activate
            Range("A" & currentRow).PasteSpecial Paste:=xlPasteValues
            
            Range("B" & currentRow).Value = "PAYMENT - CURED"
            If visibleCount > 1 Then
                Range("B" & currentRow).AutoFill Destination:=Range("B" & currentRow & ":B" & (currentRow + visibleCount - 1))
            End If
            currentRow = currentRow + visibleCount
            
            totalRows = totalRows + (visibleCount * 2)
            MsgBox "PTP data processed: " & (visibleCount * 2) & " rows.", vbInformation
        Else
            MsgBox "No PTP Barcode found.", vbInformation
        End If
        
        '------------------------------------------------------------
        ' 3. PROCESS SPMADRID
        '------------------------------------------------------------
        Windows(curedListFile).Activate
        ' Clear any existing filters
        If ws.FilterMode Then ws.ShowAllData
        
        ' Apply filter for SPMADRID
        ws.Range("$A$1:$AU$" & lastRow).AutoFilter Field:=2, Criteria1:="SPMADRID"
        
        ' Check if any rows are visible after filtering
        On Error Resume Next
        Set visibleCells = ws.Range("A2:A" & lastRow).SpecialCells(xlCellTypeVisible)
        On Error GoTo 0
        
        ' If SPMADRID rows found, process them
        If Not visibleCells Is Nothing Then
            visibleCount = visibleCells.Cells.Count
            
            ' FIRST COPY - "PTP NEW - CURED_GHOST"
            visibleCells.Copy
            Windows(templateFileName).Activate
            Range("A" & currentRow).PasteSpecial Paste:=xlPasteValues
            
            Range("B" & currentRow).Value = "PTP NEW - CURED_GHOST"
            If visibleCount > 1 Then
                Range("B" & currentRow).AutoFill Destination:=Range("B" & currentRow & ":B" & (currentRow + visibleCount - 1))
            End If
            currentRow = currentRow + visibleCount
            
            ' SECOND COPY - "PAYMENT - CURED"
            Windows(curedListFile).Activate
            visibleCells.Copy
            Windows(templateFileName).Activate
            Range("A" & currentRow).PasteSpecial Paste:=xlPasteValues
            
            Range("B" & currentRow).Value = "PAYMENT - CURED"
            If visibleCount > 1 Then
                Range("B" & currentRow).AutoFill Destination:=Range("B" & currentRow & ":B" & (currentRow + visibleCount - 1))
            End If
            currentRow = currentRow + visibleCount
            
            totalRows = totalRows + (visibleCount * 2)
            MsgBox "SPMADRID data processed: " & (visibleCount * 2) & " rows.", vbInformation
        Else
            MsgBox "No SPMADRID data found.", vbInformation
        End If
        
        ' Final summary for ImportRemarks
        MsgBox "ImportRemarks processing complete. Total rows added: " & totalRows, vbInformation
        
        ' Reset any filters
        Windows(curedListFile).Activate
        If ws.FilterMode Then ws.ShowAllData
        
        Application.CutCopyMode = False
        
        ' Calculate final row count (starting from row 2)
        finalRowCount = totalRows + 1
        
        Windows(templateFileName).Activate
        Range("C2").Select
        ActiveCell.FormulaR1C1 = _
            "=TEXT(XLOOKUP(RC[-2],'[" & curedListFile & "]Sheet1'!C1,'[" & curedListFile & "]Sheet1'!C3,0,0,1) +" & Chr(10) & "IF(ISNUMBER(SEARCH(""PTP NEW"",RC[-1])), TIME(14,40,0)," & Chr(10) & "IF(ISNUMBER(SEARCH(""PTP FF"",RC[-1])), TIME(14,50,0)," & Chr(10) & "IF(ISNUMBER(SEARCH(""CURED"",RC[-1])), TIME(15,0,0), 0)))," & Chr(10) & """MM/DD/YYYY hh:mm:ss AM/PM"")"
        
        ' Use dynamic range for AutoFill based on totalRows
        If finalRowCount > 2 Then
            Range("C2").AutoFill Destination:=Range("C2:C" & finalRowCount)
        End If
        
        Range("D2").Select
        ActiveCell.FormulaR1C1 = _
            "=IF(ISNUMBER(SEARCH(""PAYMENT"", RC[-2])), """"," & Chr(10) & "    TEXT(XLOOKUP(RC[-3], '[" & curedListFile & "]Sheet1'!C1, '[" & curedListFile & "]Sheet1'!C3,,0,1), ""MM/DD/YYYY"")" & Chr(10) & ")"
        
        If finalRowCount > 2 Then
            Range("D2").AutoFill Destination:=Range("D2:D" & finalRowCount)
        End If
        
        Range("G2").Select
        ActiveCell.FormulaR1C1 = _
            "=IF(IFERROR(SEARCH(""PTP NEW"", RC[-5]), 0), CONCAT(""1_"", RC[5], "" - PTP NEW""), IF(IFERROR(SEARCH(""PTP FF"", RC[-5]), 0), CONCAT(RC[5], "" - FPTP""), IF(IFERROR(SEARCH(""PAYMENT"", RC[-5]), 0), ""CURED - CONFIRM VIA SELECTIVE LIST"", """")))"
        
        If finalRowCount > 2 Then
            Range("G2").AutoFill Destination:=Range("G2:G" & finalRowCount)
        End If
        
        Range("I2").Select
        ActiveCell.FormulaR1C1 = _
            "=IF(ISNUMBER(SEARCH(""PAYMENT"", RC[-7])), """"," & Chr(10) & "    XLOOKUP(RC[-8], '[" & curedListFile & "]Sheet1'!C1, '[" & curedListFile & "]Sheet1'!C4,,0,1)" & Chr(10) & ")"
        
        If finalRowCount > 2 Then
            Range("I2").AutoFill Destination:=Range("I2:I" & finalRowCount)
        End If
        
        Range("J2").Select
        ActiveCell.FormulaR1C1 = _
            "=IF(ISNUMBER(SEARCH(""PAYMENT"", RC[-8]))," & Chr(10) & "    XLOOKUP(RC[-9], '[" & curedListFile & "]Sheet1'!C1, '[" & curedListFile & "]Sheet1'!C4,,0,1)," & Chr(10) & "    """"" & Chr(10) & ")"
        
        If finalRowCount > 2 Then
            Range("J2").AutoFill Destination:=Range("J2:J" & finalRowCount)
        End If
        
        Range("K2").Select
        ActiveCell.FormulaR1C1 = _
            "=XLOOKUP(RC[-10],'[" & curedListFile & "]Sheet1'!C1,'[" & curedListFile & "]Sheet1'!C2,,0,1)"
        
        If finalRowCount > 2 Then
            Range("K2").AutoFill Destination:=Range("K2:K" & finalRowCount)
        End If

        Range("L2").Select
        ActiveCell.FormulaR1C1 = _
            "=IF(ISNUMBER(SEARCH(""PAYMENT"", RC[-10])), """"," & Chr(10) & "    IF(ISBLANK(XLOOKUP(RC[-11], '[" & curedListFile & "]Sheet1'!C1, '[" & curedListFile & "]Sheet1'!C42,,0,1))," & Chr(10) & "        XLOOKUP(RC[-11], '[" & curedListFile & "]Sheet1'!C1, '[" & curedListFile & "]Sheet1'!C43,,0,1)," & Chr(10) & "        XLOOKUP(RC[-11], '[" & curedListFile & "]Sheet1'!C1, '[" & curedListFile & "]Sheet1'!C42,,0,1)" & Chr(10) & "    )" & Chr(10) & ")"
        
        If finalRowCount > 2 Then
            Range("L2").AutoFill Destination:=Range("L2:L" & finalRowCount)
        End If
        
        Range("N2").Select
        ActiveCell.FormulaR1C1 = _
            "=IF(ISNUMBER(SEARCH(""PAYMENT"", RC[-12])), TEXT(XLOOKUP(RC[-13], '[" & curedListFile & "]Sheet1'!C1, '[" & curedListFile & "]Sheet1'!C3,,0,1), ""MM/DD/YYYY""), """")"
        If finalRowCount > 2 Then
            Range("N2").AutoFill Destination:=Range("N2:N" & finalRowCount)
        End If
        
        Range("A1").Select
        Range(Selection, Selection.End(xlToRight)).Select
        Range(Selection, Selection.End(xlDown)).Select
        Selection.Copy
        Workbooks.Add
        Selection.PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, _
            SkipBlanks:=False, Transpose:=False
        Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
            :=False, Transpose:=False
        Cells.Select
        Cells.EntireColumn.AutoFit
        Application.CutCopyMode = False
        Columns("C:C").Select
        Selection.NumberFormat = "@"
        Columns("D:D").Select
        Selection.NumberFormat = "@"
        Columns("N:N").Select
        Selection.NumberFormat = "@"

        ChDir "C:\Users\SPM\Documents\UPDATE FILE\BPI\BPI_FOR_REMARKS"
        ActiveWorkbook.SaveAs Filename:= _
            "C:\Users\SPM\Documents\UPDATE FILE\BPI\BPI_FOR_REMARKS\" & remarksFileName, _
            FileFormat:=xlOpenXMLWorkbook, CreateBackup:=False
        ActiveWindow.Close

        ' If user only wanted ImportRemarks, exit here
        If response = vbNo Then
            MsgBox "ImportRemarks completed successfully!", vbInformation
            Exit Sub
        End If
        

        ' Second part: ImportOthers
        ' -------------------------------
        MsgBox "Starting ImportOthers...", vbInformation
        
        ' Open source workbook and copy data
        Windows(curedListFile).Activate
        Columns("A:B").Select
        Selection.Copy
        
        ' Create new workbook and paste data
        Workbooks.Add
        Selection.PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, _
            SkipBlanks:=False, Transpose:=False
        Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
            :=False, Transpose:=False
        
        ' Set header text
        Range("B1").Select
        Application.CutCopyMode = False
        ActiveCell.FormulaR1C1 = "REMARK BY"
        
        ' Save the workbook with dynamic name
        ChDir "C:\Users\SPM\Documents\UPDATE FILE\BPI\BPI_FOR_OTHERS"
        ActiveWorkbook.SaveAs Filename:= _
            "C:\Users\SPM\Documents\UPDATE FILE\BPI\BPI_FOR_OTHERS\" & othersFileName, _
            FileFormat:=xlOpenXMLWorkbook, CreateBackup:=False
        ActiveWindow.Close

        ' Reset view
        Range("A1").Select
        MsgBox "ImportOthers completed successfully!", vbInformation
        
        ' Third part: ImportPayments
        ' -------------------------------
        MsgBox "Starting ImportPayments...", vbInformation
        
        ' Open source workbook
        Windows(curedListFile).Activate
        
        ' Create new workbook
        Workbooks.Add
        tempWorkbookName = ActiveWorkbook.Name
        
        ' Add headers to new workbook
        Range("A1").Value = "LAN"
        Range("B1").Value = "ACCOUNT NUMBER"
        Range("C1").Value = "NAME"
        Range("D1").Value = "CARD NUMBER"
        Range("E1").Value = "PAYMENT AMOUNT"
        Range("F1").Value = "PAYMENT DATE"
        
        ' Position cursor for data import
        Range("A2").Select
        
        ' Switch to source workbook and copy LAN data
        Windows(curedListFile).Activate
        Range("Q2").Select
        lastRow = Range("Q" & Rows.Count).End(xlUp).Row
        Range("Q2:Q" & lastRow).Copy
        
        ' Paste into new workbook
        Windows(tempWorkbookName).Activate
        Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
        
        ' Copy NAME data
        Windows(curedListFile).Activate
        Application.CutCopyMode = False
        Range("R2:R" & lastRow).Copy
        
        ' Paste NAME data
        Windows(tempWorkbookName).Activate
        Range("C2").Select
        Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
        
        ' Copy PAYMENT AMOUNT data
        Windows(curedListFile).Activate
        Application.CutCopyMode = False
        Range("D2:D" & lastRow).Copy
        
        ' Paste PAYMENT AMOUNT data
        Windows(tempWorkbookName).Activate
        Range("E2").Select
        Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
        
        ' Copy PAYMENT DATE data
        Windows(curedListFile).Activate
        Application.CutCopyMode = False
        Range("C2:C" & lastRow).Copy
        
        ' Paste PAYMENT DATE data
        Windows(tempWorkbookName).Activate
        Range("F2").Select
        Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
        
        ' Insert column for date formatting
        Columns("F:F").Select
        Application.CutCopyMode = False
        Selection.Insert Shift:=xlToRight, CopyOrigin:=xlFormatFromLeftOrAbove
        
        ' Format dates
        Range("F2").FormulaR1C1 = "=TEXT(RC[1], ""MM/DD/YYYY"")"
        lastRow = Range("G" & Rows.Count).End(xlUp).Row
        Range("F2").AutoFill Destination:=Range("F2:F" & lastRow)
        
        ' Copy formatted dates
        Range("F2:F" & lastRow).Copy
        Range("G2").Select
        Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
        
        ' Delete helper column
        Columns("F:F").Select
        Application.CutCopyMode = False
        Selection.Delete Shift:=xlToLeft
        
        ' Format columns
        Columns("F:F").Select
        Selection.NumberFormat = "@"
        
        ' Auto-fit all columns
        Cells.Select
        Selection.Columns.AutoFit
        Range("A1").Select
        
        ' Save the workbook with dynamic name
        ChDir "C:\Users\SPM\Documents\UPDATE FILE\BPI\BPI_FOR_PAYMENTS"
        ActiveWorkbook.SaveAs Filename:= _
            "C:\Users\SPM\Documents\UPDATE FILE\BPI\BPI_FOR_PAYMENTS\" & paymentsFileName, _
            FileFormat:=xlOpenXMLWorkbook, CreateBackup:=False
        ActiveWindow.Close

        Windows(curedListFile).Activate
        ActiveWindow.Close

        Windows(templateFileName).Activate
        ActiveWindow.Close
        
        ' Activate the necessary workbooks
        MsgBox "All imports completed successfully!" & vbCrLf & vbCrLf & _
            "- ImportRemarks: Complete" & vbCrLf & _
            "- ImportOthers: Saved as " & othersFileName & vbCrLf & _
            "- ImportPayments: Saved as " & paymentsFileName, vbInformation
    End Sub

    Sub ClearImports()
    '
    ' ClearImports Macro
    '
    ' Keyboard Shortcut: Ctrl+C
    '
        Dim confirmClear As Integer
        confirmClear = MsgBox("Are you sure you want to clear the contents?", vbYesNo + vbExclamation, "Confirm Clear")
        
        If confirmClear = vbYes Then
            Range("A2:N2").Select
            Range(Selection, Selection.End(xlDown)).Select
            Selection.ClearContents
            Range("N2").Select
            MsgBox "Contents cleared successfully.", vbInformation
        Else
            MsgBox "Operation cancelled.", vbInformation
        End If
    End Sub

